{"version":3,"file":"static/js/306.45197d16.chunk.js","mappings":"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","sources":["../node_modules/brotli-dec-wasm/pkg/index_bg.js"],"sourcesContent":["import * as wasm from './index_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* No error reporting included. To get the detailed error code, use `BrotliDecStream`.\n* @param {Uint8Array} input\n* @returns {Uint8Array}\n*/\nexport function brotliDec(input) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passArray8ToWasm0(input, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.brotliDec(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n*/\nexport const BrotliDecStreamResult = Object.freeze({\n/**\n* The stream is just inited and have not been runned.\n* `BrotliResult` uses `ResultFailure = 0`, but as we will convert `ResultFailure` to a negative actual error code,\n* 0 is reused as no input currently.\n*/\nInit:0,\"0\":\"Init\",ResultSuccess:1,\"1\":\"ResultSuccess\",NeedsMoreInput:2,\"2\":\"NeedsMoreInput\",NeedsMoreOutput:3,\"3\":\"NeedsMoreOutput\", });\n/**\n* Copied and modified from enum BrotliDecoderErrorCode of dropbox/rust-brotli-decompressor.\n* It is not PascalCase but kept in MACRO_CASE because changing all names is too troublesome.\n* And most of the time you may not need to care about the error code.\n* NOTICE: All numbers are reversed to positive, required by wasm_bindgen.\n*/\nexport const BrotliDecStreamErrCode = Object.freeze({ BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE:1,\"1\":\"BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE\",BROTLI_DECODER_ERROR_FORMAT_RESERVED:2,\"2\":\"BROTLI_DECODER_ERROR_FORMAT_RESERVED\",BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE:3,\"3\":\"BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE\",BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET:4,\"4\":\"BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET\",BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME:5,\"5\":\"BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME\",BROTLI_DECODER_ERROR_FORMAT_CL_SPACE:6,\"6\":\"BROTLI_DECODER_ERROR_FORMAT_CL_SPACE\",BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE:7,\"7\":\"BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE\",BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT:8,\"8\":\"BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT\",BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1:9,\"9\":\"BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1\",BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2:10,\"10\":\"BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2\",BROTLI_DECODER_ERROR_FORMAT_TRANSFORM:11,\"11\":\"BROTLI_DECODER_ERROR_FORMAT_TRANSFORM\",BROTLI_DECODER_ERROR_FORMAT_DICTIONARY:12,\"12\":\"BROTLI_DECODER_ERROR_FORMAT_DICTIONARY\",BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS:13,\"13\":\"BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS\",BROTLI_DECODER_ERROR_FORMAT_PADDING_1:14,\"14\":\"BROTLI_DECODER_ERROR_FORMAT_PADDING_1\",BROTLI_DECODER_ERROR_FORMAT_PADDING_2:15,\"15\":\"BROTLI_DECODER_ERROR_FORMAT_PADDING_2\",BROTLI_DECODER_ERROR_FORMAT_DISTANCE:16,\"16\":\"BROTLI_DECODER_ERROR_FORMAT_DISTANCE\",BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET:19,\"19\":\"BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET\",BROTLI_DECODER_ERROR_INVALID_ARGUMENTS:20,\"20\":\"BROTLI_DECODER_ERROR_INVALID_ARGUMENTS\",BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES:21,\"21\":\"BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES\",BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS:22,\"22\":\"BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS\",BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP:25,\"25\":\"BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP\",BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1:26,\"26\":\"BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1\",BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2:27,\"27\":\"BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2\",BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES:30,\"30\":\"BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES\",BROTLI_DECODER_ERROR_UNREACHABLE:31,\"31\":\"BROTLI_DECODER_ERROR_UNREACHABLE\", });\n/**\n*/\nexport class BrotliDecStream {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BrotliDecStream.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_brotlidecstream_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        var ret = wasm.brotlidecstream_new();\n        return BrotliDecStream.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} input\n    * @param {number} output_size\n    * @returns {Uint8Array}\n    */\n    dec(input, output_size) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passArray8ToWasm0(input, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.brotlidecstream_dec(retptr, this.ptr, ptr0, len0, output_size);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    total_out() {\n        var ret = wasm.brotlidecstream_total_out(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    result() {\n        var ret = wasm.brotlidecstream_result(this.ptr);\n        return ret;\n    }\n}\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_rethrow(arg0) {\n    throw takeObject(arg0);\n};\n\n"],"names":["cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","dropObject","takeObject","ret","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","set","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayU8FromWasm0","brotliDec","input","retptr","ptr0","len0","r0","r1","v1","slice","BrotliDecStreamResult","Object","freeze","Init","ResultSuccess","NeedsMoreInput","NeedsMoreOutput","BrotliDecStreamErrCode","BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE","BROTLI_DECODER_ERROR_FORMAT_RESERVED","BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE","BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET","BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME","BROTLI_DECODER_ERROR_FORMAT_CL_SPACE","BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE","BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT","BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1","BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2","BROTLI_DECODER_ERROR_FORMAT_TRANSFORM","BROTLI_DECODER_ERROR_FORMAT_DICTIONARY","BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS","BROTLI_DECODER_ERROR_FORMAT_PADDING_1","BROTLI_DECODER_ERROR_FORMAT_PADDING_2","BROTLI_DECODER_ERROR_FORMAT_DISTANCE","BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET","BROTLI_DECODER_ERROR_INVALID_ARGUMENTS","BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES","BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS","BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP","BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1","BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2","BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES","BROTLI_DECODER_ERROR_UNREACHABLE","BrotliDecStream","__wrap","this","__destroy_into_raw","output_size","create","prototype","__wbindgen_string_new","arg0","arg1","__wbindgen_throw","Error","__wbindgen_rethrow"],"sourceRoot":""}